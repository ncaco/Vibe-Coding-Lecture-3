# Windows OS 개발 환경 규칙

## Shell 및 명령어 관련 규칙

### PowerShell 우선 사용
- Windows 환경에서는 PowerShell을 기본 shell로 사용합니다.
- 명령어 제안 시 PowerShell 문법을 우선적으로 사용합니다.
- `cmd` 대신 `powershell` 명령어를 권장합니다.

### 경로 표기 규칙
- Windows 경로는 백슬래시(`\`)를 사용하지만, PowerShell에서는 슬래시(`/`)도 지원합니다.
- 경로에 공백이 포함된 경우 따옴표로 감싸야 합니다.
- 상대 경로와 절대 경로를 명확히 구분하여 사용합니다.

### 환경 변수 규칙
- PowerShell에서는 `$env:VARIABLE_NAME` 형식을 사용합니다.
- 시스템 환경 변수는 `$env:PATH`, `$env:USERPROFILE` 등으로 접근합니다.
- 임시 환경 변수 설정: `$env:TEMP_VAR = "value"`

### 파일 및 디렉토리 작업
- 파일 생성: `New-Item -ItemType File -Path "path\to\file.txt"`
- 디렉토리 생성: `New-Item -ItemType Directory -Path "path\to\directory"`
- 파일 복사: `Copy-Item "source" "destination"`
- 파일 이동: `Move-Item "source" "destination"`
- 파일 삭제: `Remove-Item "path\to\file"`

### 프로세스 관리
- 프로세스 실행: `Start-Process "program.exe"`
- 프로세스 종료: `Stop-Process -Name "processname"`
- 프로세스 목록: `Get-Process`

### 네트워크 관련
- 포트 확인: `netstat -an`
- 네트워크 연결 테스트: `Test-NetConnection -ComputerName "hostname" -Port 80`

### Git 관련 (Windows 환경)
- Git Bash 대신 PowerShell에서 Git 명령어 사용을 권장합니다.
- 긴 경로명 문제 해결을 위해 Git 설정: `git config --global core.longpaths true`
- Windows 줄바꿈 설정: `git config --global core.autocrlf true`

### 패키지 관리
- Chocolatey 사용 시: `choco install package-name`
- Winget 사용 시: `winget install package-name`
- npm/yarn 사용 시 Windows 경로 문제 주의

### 디버깅 및 로깅
- PowerShell 로그: `Start-Transcript -Path "log.txt"`
- 로그 중지: `Stop-Transcript`
- 에러 처리: `try { command } catch { Write-Error $_.Exception.Message }`

### 성능 최적화
- 대용량 파일 처리 시 PowerShell의 스트리밍 기능 활용
- 병렬 처리: `ForEach-Object -Parallel { script }`
- 메모리 효율적인 명령어 체이닝 사용

### 보안 관련
- 실행 정책 확인: `Get-ExecutionPolicy`
- 스크립트 실행 허용: `Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser`
- 민감한 정보는 환경 변수나 보안 파일에 저장

### 개발 도구 통합
- VS Code 터미널에서 PowerShell 사용 권장
- Windows Terminal 사용 시 PowerShell 프로필 설정
- 개발 환경 변수는 `.env` 파일이나 시스템 환경 변수로 관리
alwaysApply: true
---
